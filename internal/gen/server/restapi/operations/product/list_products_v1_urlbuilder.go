// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// ListProductsV1URL generates an URL for the list products v1 operation
type ListProductsV1URL struct {
	Brands     []string
	Categories []string
	Colors     []string
	Gender     string
	Labelsin   []string
	MaxPrice   *int32
	MinPrice   *int32
	PageSize   *int32
	PageToken  *string
	Sizes      []string
	Sort       *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListProductsV1URL) WithBasePath(bp string) *ListProductsV1URL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListProductsV1URL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *ListProductsV1URL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/v1/products"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var brandsIR []string
	for _, brandsI := range o.Brands {
		brandsIS := brandsI
		if brandsIS != "" {
			brandsIR = append(brandsIR, brandsIS)
		}
	}

	brands := swag.JoinByFormat(brandsIR, "")

	if len(brands) > 0 {
		qsv := brands[0]
		if qsv != "" {
			qs.Set("brands", qsv)
		}
	}

	var categoriesIR []string
	for _, categoriesI := range o.Categories {
		categoriesIS := categoriesI
		if categoriesIS != "" {
			categoriesIR = append(categoriesIR, categoriesIS)
		}
	}

	categories := swag.JoinByFormat(categoriesIR, "")

	if len(categories) > 0 {
		qsv := categories[0]
		if qsv != "" {
			qs.Set("categories", qsv)
		}
	}

	var colorsIR []string
	for _, colorsI := range o.Colors {
		colorsIS := colorsI
		if colorsIS != "" {
			colorsIR = append(colorsIR, colorsIS)
		}
	}

	colors := swag.JoinByFormat(colorsIR, "")

	if len(colors) > 0 {
		qsv := colors[0]
		if qsv != "" {
			qs.Set("colors", qsv)
		}
	}

	genderQ := o.Gender
	if genderQ != "" {
		qs.Set("gender", genderQ)
	}

	var labelsinIR []string
	for _, labelsinI := range o.Labelsin {
		labelsinIS := labelsinI
		if labelsinIS != "" {
			labelsinIR = append(labelsinIR, labelsinIS)
		}
	}

	labelsin := swag.JoinByFormat(labelsinIR, "")

	if len(labelsin) > 0 {
		qsv := labelsin[0]
		if qsv != "" {
			qs.Set("labelsin", qsv)
		}
	}

	var maxPriceQ string
	if o.MaxPrice != nil {
		maxPriceQ = swag.FormatInt32(*o.MaxPrice)
	}
	if maxPriceQ != "" {
		qs.Set("max_price", maxPriceQ)
	}

	var minPriceQ string
	if o.MinPrice != nil {
		minPriceQ = swag.FormatInt32(*o.MinPrice)
	}
	if minPriceQ != "" {
		qs.Set("min_price", minPriceQ)
	}

	var pageSizeQ string
	if o.PageSize != nil {
		pageSizeQ = swag.FormatInt32(*o.PageSize)
	}
	if pageSizeQ != "" {
		qs.Set("page_size", pageSizeQ)
	}

	var pageTokenQ string
	if o.PageToken != nil {
		pageTokenQ = *o.PageToken
	}
	if pageTokenQ != "" {
		qs.Set("page_token", pageTokenQ)
	}

	var sizesIR []string
	for _, sizesI := range o.Sizes {
		sizesIS := sizesI
		if sizesIS != "" {
			sizesIR = append(sizesIR, sizesIS)
		}
	}

	sizes := swag.JoinByFormat(sizesIR, "")

	if len(sizes) > 0 {
		qsv := sizes[0]
		if qsv != "" {
			qs.Set("sizes", qsv)
		}
	}

	var sortQ string
	if o.Sort != nil {
		sortQ = *o.Sort
	}
	if sortQ != "" {
		qs.Set("sort", sortQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *ListProductsV1URL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *ListProductsV1URL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *ListProductsV1URL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on ListProductsV1URL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on ListProductsV1URL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *ListProductsV1URL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
