// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetProductParams creates a new GetProductParams object
//
// There are no default values defined in the spec.
func NewGetProductParams() GetProductParams {

	return GetProductParams{}
}

// GetProductParams contains all the bound params for the get product operation
// typically these are obtained from a http.Request
//
// swagger:parameters get_product
type GetProductParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	Gender string
	/*
	  Required: true
	  In: path
	*/
	ProductID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetProductParams() beforehand.
func (o *GetProductParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qGender, qhkGender, _ := qs.GetOK("gender")
	if err := o.bindGender(qGender, qhkGender, route.Formats); err != nil {
		res = append(res, err)
	}

	rProductID, rhkProductID, _ := route.Params.GetOK("product_id")
	if err := o.bindProductID(rProductID, rhkProductID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGender binds and validates parameter Gender from query.
func (o *GetProductParams) bindGender(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("gender", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("gender", "query", raw); err != nil {
		return err
	}
	o.Gender = raw

	if err := o.validateGender(formats); err != nil {
		return err
	}

	return nil
}

// validateGender carries on validations for parameter Gender
func (o *GetProductParams) validateGender(formats strfmt.Registry) error {

	if err := validate.EnumCase("gender", "query", o.Gender, []interface{}{"men", "women"}, true); err != nil {
		return err
	}

	return nil
}

// bindProductID binds and validates parameter ProductID from path.
func (o *GetProductParams) bindProductID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ProductID = raw

	return nil
}
