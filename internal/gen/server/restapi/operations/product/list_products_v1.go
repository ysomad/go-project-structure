// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListProductsV1HandlerFunc turns a function with the right signature into a list products v1 handler
type ListProductsV1HandlerFunc func(ListProductsV1Params) ListProductsV1Responder

// Handle executing the request and returning a response
func (fn ListProductsV1HandlerFunc) Handle(params ListProductsV1Params) ListProductsV1Responder {
	return fn(params)
}

// ListProductsV1Handler interface for that can handle valid list products v1 params
type ListProductsV1Handler interface {
	Handle(ListProductsV1Params) ListProductsV1Responder
}

// NewListProductsV1 creates a new http.Handler for the list products v1 operation
func NewListProductsV1(ctx *middleware.Context, handler ListProductsV1Handler) *ListProductsV1 {
	return &ListProductsV1{Context: ctx, Handler: handler}
}

/*
	ListProductsV1 swagger:route GET /v1/products product listProductsV1

Список товаров
*/
type ListProductsV1 struct {
	Context *middleware.Context
	Handler ListProductsV1Handler
}

func (o *ListProductsV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListProductsV1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
