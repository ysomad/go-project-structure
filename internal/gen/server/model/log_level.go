// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogLevel log level
//
// swagger:model LogLevel
type LogLevel struct {

	// level
	// Enum: ["DEBUG","INFO","WARN","ERROR"]
	Level string `json:"level,omitempty"`
}

// Validate validates this log level
func (m *LogLevel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var logLevelTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEBUG","INFO","WARN","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logLevelTypeLevelPropEnum = append(logLevelTypeLevelPropEnum, v)
	}
}

const (

	// LogLevelLevelDEBUG captures enum value "DEBUG"
	LogLevelLevelDEBUG string = "DEBUG"

	// LogLevelLevelINFO captures enum value "INFO"
	LogLevelLevelINFO string = "INFO"

	// LogLevelLevelWARN captures enum value "WARN"
	LogLevelLevelWARN string = "WARN"

	// LogLevelLevelERROR captures enum value "ERROR"
	LogLevelLevelERROR string = "ERROR"
)

// prop value enum
func (m *LogLevel) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, logLevelTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LogLevel) validateLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this log level based on context it is used
func (m *LogLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LogLevel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogLevel) UnmarshalBinary(b []byte) error {
	var res LogLevel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
