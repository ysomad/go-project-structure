// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProductVariantOffer product variant offer
//
// swagger:model ProductVariantOffer
type ProductVariantOffer struct {

	// delivery
	Delivery *DeliveryPeriod `json:"delivery,omitempty"`

	// in stock
	InStock bool `json:"in_stock,omitempty"`

	// last left
	LastLeft bool `json:"last_left,omitempty"`

	// merchant
	Merchant *OfferMerchant `json:"merchant,omitempty"`

	// price
	Price *PriceWithShipment `json:"price,omitempty"`

	// return policy
	ReturnPolicy bool `json:"return_policy,omitempty"`

	// variant id
	VariantID string `json:"variant_id,omitempty"`
}

// Validate validates this product variant offer
func (m *ProductVariantOffer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductVariantOffer) validateDelivery(formats strfmt.Registry) error {
	if swag.IsZero(m.Delivery) { // not required
		return nil
	}

	if m.Delivery != nil {
		if err := m.Delivery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delivery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delivery")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariantOffer) validateMerchant(formats strfmt.Registry) error {
	if swag.IsZero(m.Merchant) { // not required
		return nil
	}

	if m.Merchant != nil {
		if err := m.Merchant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchant")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariantOffer) validatePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this product variant offer based on the context it is used
func (m *ProductVariantOffer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDelivery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductVariantOffer) contextValidateDelivery(ctx context.Context, formats strfmt.Registry) error {

	if m.Delivery != nil {

		if swag.IsZero(m.Delivery) { // not required
			return nil
		}

		if err := m.Delivery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delivery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delivery")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariantOffer) contextValidateMerchant(ctx context.Context, formats strfmt.Registry) error {

	if m.Merchant != nil {

		if swag.IsZero(m.Merchant) { // not required
			return nil
		}

		if err := m.Merchant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchant")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariantOffer) contextValidatePrice(ctx context.Context, formats strfmt.Registry) error {

	if m.Price != nil {

		if swag.IsZero(m.Price) { // not required
			return nil
		}

		if err := m.Price.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductVariantOffer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductVariantOffer) UnmarshalBinary(b []byte) error {
	var res ProductVariantOffer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
